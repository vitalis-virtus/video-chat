// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Return a message about the service using the service name from configuration",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Return a message about the service",
                "responses": {
                    "200": {
                        "description": "This is a service 'service_name'",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/channels": {
            "post": {
                "description": "Create new channel.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Create new channel",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/models.CreateChannelRes"
                        }
                    },
                    "500": {
                        "description": "Cannot create channel",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        },
        "/channels/{id}": {
            "get": {
                "description": "Join to channel.",
                "tags": [
                    "channels"
                ],
                "summary": "Join to channet",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "WebSocket Protocol Switch",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Return a success response indicating that the service is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Return a health check response",
                "responses": {
                    "200": {
                        "description": "All good",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPSuccess"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateChannelRes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "66cd5b0d-4f91-43a6-96b0-f2ae9e3863d1"
                }
            }
        },
        "models.HTTPError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.HTTPSuccess": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Used for secure private routes",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "vide-chat API",
	Description:      "This is a swagger specification for video-chat server backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
